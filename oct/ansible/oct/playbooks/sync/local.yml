---
- name: ensure the call to this playbook is well-formed
  hosts: 'localhost'
  connection: 'local'
  become: no
  gather_facts: no

  pre_tasks:
    - name: ensure all required variables are set
      fail:
        msg: 'This playbook requires {{ item }} to be set.'
      when: item not in vars and item not in hostvars[inventory_hostname]
      with_items:
        - origin_ci_hosts
        - origin_ci_sync_repository
        - origin_ci_sync_version

- name: determine the sync destination on each target host
  hosts: '{{ origin_ci_hosts }}'
  connection: '{{ origin_ci_connection }}'
  become: '{{ origin_ci_become | default(omit) }}'
  become_method: '{{ origin_ci_become_method | default(omit) }}'
  become_user: '{{ origin_ci_become_user | default(omit) }}'

  tasks:
    - name: ensure that we are given a destination or we can determine one
      fail:
        msg: 'The remote repository location could not be determined as $GOPATH was unset.'
      when: origin_ci_sync_destination is not defined and ansible_env.GOPATH is not defined

    - name: determine the directory to sync if no override is provided
      set_fact:
        origin_ci_sync_destination: "{{ ansible_env.GOPATH }}/src/github.com/openshift/{{ origin_ci_sync_repository }}"
      when: origin_ci_sync_destination is not defined

- name: sync a repository from local sources
  hosts: 'localhost'
  connection: 'local'
  become: no

  roles:
    - role: local-sync

- name: ensure the remote repository is in the correct state
  hosts: '{{ origin_ci_hosts }}'
  connection: '{{ origin_ci_connection }}'
  become: '{{ origin_ci_become | default(omit) }}'
  become_method: '{{ origin_ci_become_method | default(omit) }}'
  become_user: '{{ origin_ci_become_user | default(omit) }}'

  tasks:
    - name: reset the state of the remote repository to be correct
      command: 'git reset --hard {{ origin_ci_sync_version }}'
      args:
        chdir: '{{ origin_ci_sync_destination }}'

    - name: determine the message of the last commit
      command: 'git log -n 1 --format=%s'
      args:
        chdir: '{{ origin_ci_sync_destination }}'
      register: origin_ci_sync_commit_subject

    - name: reset automated commits that transferred unstaged changes
      command: 'git reset --soft HEAD^1'
      args:
        chdir: '{{ origin_ci_sync_destination }}'
      when: "'<AUTOMATED COMMIT OF UNSTAGED CHANGES>' in origin_ci_sync_commit_subject"
      register: origin_ci_sync_reset_unstaged

    - name: determine the message of the last commit
      command: 'git log -n 1 --format=%s'
      args:
        chdir: '{{ origin_ci_sync_destination }}'
      register: origin_ci_sync_commit_subject
      when: origin_ci_sync_reset_unstaged | succeeded

    - name: reset automated commits that transferred staged changes
      command: 'git reset --mixed HEAD^1'
      args:
        chdir: '{{ origin_ci_sync_destination }}'
      when: "'<AUTOMATED COMMIT OF STAGED CHANGES>' in origin_ci_sync_commit_subject"
      register: origin_ci_sync_reset_unstaged
---
- name: ensure we have the parameters necessary to package the VM image
  hosts: 'localhost'
  connection: 'local'
  become: no
  gather_facts: no

  pre_tasks:
    - name: ensure all required variables are set
      fail:
        msg: 'This playbook requires {{ item }} to be set.'
      when: item not in vars and item not in hostvars[inventory_hostname]
      with_items:
        - origin_ci_aws_stage_strategy
        - origin_ci_inventory_dir
        - origin_ci_aws_region
        - origin_ci_hosts
        - origin_ci_connection

    - name: ensure only one AWS instance is running
      fail:
        msg: 'Packaging AMIs with more than one AWS EC2 instance up is not supported.'
      when: "groups['{{ origin_ci_hosts }}'] | length | int > 1"

- name: gather information about the instance we are about to package
  hosts: '{{ origin_ci_hosts }}'
  connection: '{{ origin_ci_connection }}'
  become: yes
  become_user: root

  tasks:
    - name: gather facts from the EC2 API
      ec2_facts:

    - name: tell the local host which remote host is being packaged
      set_fact:
        origin_ci_aws_instance:

- name: package the VM image
  hosts: 'localhost'
  connection: 'local'
  become: no
  gather_facts: no

  pre_tasks:
    - name: gather facts from the EC2 API
      ec2_facts:
      delegate_to: '{{ groups[origin_ci_hosts][0] }}'

  tasks:
    - name: determine if we are inside AWS EC2
      command: 'curl -s http://instance-data.ec2.internal'
      ignore_errors: yes
      register: ec2_probe

    - name: determine hostname variable when controlling from inside EC2
      set_fact:
        origin_ci_aws_hostname_variable: 'ansible_ec2_local_ipv4'
      when: ec2_probe | succeeded

    - name: determine hostname variable when controlling from outside EC2
      set_fact:
        origin_ci_aws_hostname_variable: 'ansible_ec2_public_ipv4'
      when: ec2_probe | failed

    - name: determine AWS EC2 hostname
      set_fact:
        origin_ci_aws_hostname: '{{ hostvars[inventory_hostname][origin_ci_aws_hostname_variable] }}'

    - name: determine AWS EC2 image metadata
      set_fact:
        origin_ci_aws_ami_os: "{{ hostvars[origin_ci_aws_hostname]['origin_ci_aws_ami_os'] }}"
        origin_ci_aws_ami_stage: "{{ hostvars[origin_ci_aws_hostname]['origin_ci_aws_ami_stage'] }}"

    - name: register stage upgrades
      set_fact:
        origin_ci_image_upgrades:
          bare: base
          base: install

    - name: update image stage if we are upgrading stages
      set_fact:
        origin_ci_aws_ami_stage: '{{ origin_ci_image_upgrades[origin_ci_aws_ami_stage] }}'
      when: origin_ci_aws_stage_strategy == 'upgrade'

    - name: package the Amazon machine image from the running instance
      ec2_ami:
        instance_id: '{{ ansible_ec2_instance_id }}'
        region: '{{ origin_ci_aws_region }}'
        state: present
        name: 'openshiftdevel_{{ origin_ci_aws_ami_os }}_{{ origin_ci_aws_ami_stage }}'
        description: 'OpenShift Origin development AMI on {{ origin_ci_aws_ami_os }} at the {{ origin_ci_aws_ami_stage }} stage.'
        tags:
          operating_system: '{{ origin_ci_aws_ami_os }}'
          image_stage: '{{ origin_ci_aws_ami_stage }}'
          ready: 'no'
        wait: yes
        wait_timeout: 600

    - name: determine the host variables file for the AWS EC2 host
      set_fact:
        origin_ci_aws_host_vars: '{{ origin_ci_inventory_dir }}/host_vars/{{ origin_ci_aws_hostname }}.yml'

    - name: generate a new set of host variables with the stage updated
      command: "/usr/bin/jq '.origin_ci_aws_ami_stage = \"{{ origin_ci_aws_ami_stage }}\"' {{ origin_ci_aws_host_vars }}"
      register: origin_ci_aws_updated_host_vars

    - name: update the image stage in the host variables for the instance
      copy:
        content: '{{ origin_ci_aws_updated_host_vars.stdout }}'
        dest: '{{ origin_ci_aws_host_vars }}'